var https=require('https');
var http=require('http');
var handleYield=function(child){
  var apiStrings=[
    {
      description:"Most Current 1 week LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=USD1WKD156N&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:7,//7 day convention
      type:"LIBOR"
    },
    {
      description:"Most Current 1 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=USD1MTD156N&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:30,//thirty day convention
      type:"LIBOR"
    },
    {
      description:"Most Current 3 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=USD3MTD156N&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:90,
      type:"LIBOR"
    },
    {
      description:"Most Current 6 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=USD6MTD156N&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:180,
      type:"LIBOR"
    },
    {
      description:"Most Current 12 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=USD12MD156N&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:360,
      type:"LIBOR"
    },
    {
      description:"Most Current 1 year swap on 3 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=DSWP1&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:360,
      type:"Swap"
    },
    {
      description:"Most Current 2 year swap on 3 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=DSWP2&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:720,
      type:"Swap"
    },
    {
      description:"Most Current 3 year swap on 3 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=DSWP3&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:1080,
      type:"Swap"
    },
    {
      description:"Most Current 4 year swap on 3 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=DSWP4&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:1440,
      type:"Swap"
    },
    {
      description:"Most Current 5 year swap on 3 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=DSWP5&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:1800,
      type:"Swap"
    },
    {
      description:"Most Current 7 year swap on 3 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=DSWP7&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:2520,
      type:"Swap"
    },
    {
      description:"Most Current 10 year swap on 3 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=DSWP10&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:3600,
      type:"Swap"
    },
    {
      description:"Most Current 30 year swap on 3 month LIBOR",
      url:"https://api.stlouisfed.org/fred/series/observations?series_id=DSWP30&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json&sort_order=desc&limit=1",
      daysPlus:10800,
      type:"Swap"
    }
  ];
  var numArray=apiStrings.length;
  var YieldCurveUnExtrapolated={};
  var retreivedYieldResults=false;
  var retreivedHistoricalResults=false;
  var historicalResults="";
  var j={"j":0};
  this.retreiveLiborAndSwap=function(){
    YieldCurveUnExtrapolated=Array(numArray);
    https.get("https://api.stlouisfed.org/fred/series/observations?series_id=USD1WKD156N&api_key=6b75e4bc06a6ed991a7a9cc64d70c3fa&file_type=json", function(result){callback(result);}); //1 week libor history
    runFunc(0);
  }

  function retreiveFutures(child){
    var getData;
    YieldCurveUnExtrapolated=[];
    http.get("http://www.cmegroup.com/CmeWS/mvc/Quotes/Future/1/G", function(response) {
      var str = '';
      //another chunk of data has been recieved, so append it to `str`
      response.on('data', function (chunk) {
        str += chunk;
      });
      //the whole response has been recieved
      response.on('end', function () {
        var oneDay = 24*60*60*1000;
        getData=JSON.parse(str);

        getData=getData.quotes;
        var Wednesday=3;
        var twoWeeks=13;
        var n=getData.length;
        var currdate=new Date();
        for(var i=0; i<n; i++){
          if(getData[i].last!=='-'){
            var year="";
            var month="";
            var date="";
            for(var j=0; j<4;j++){
              year+=getData[i].expirationDate[j];
            }
            date+=year+"-";
            month+=getData[i].expirationDate[4];
            month+=getData[i].expirationDate[5];
            //day="01";
            var myDate=new Date(year, month-1, 1);
            var beginningDay=myDate.getDay();

            //var daysAdd=beginningDay<=3?(3-beginningDay+14):7-(beginningDay-3)+14; //wednesday is "3"
            var daysAdd=beginningDay<=Wednesday?(Wednesday-beginningDay+twoWeeks):7-(beginningDay-Wednesday)+twoWeeks; //wednesday is "3"
            date+=month+"-"+daysAdd;
            //date+=getData[i].expirationDate[6];
            //date+=getData[i].expirationDate[7];

            YieldCurveUnExtrapolated.push({
              value:getData[i].last,
              date:date,
              daysPlus:Math.round(Math.abs((myDate.getTime() - currdate.getTime())/(oneDay))),
              type:"Futures"
            });
          }

        }
        if(!YieldCurveUnExtrapolated[0]){
          for(var i=0; i<n; i++){
            if(getData[i].priorSettle!=='-'){
              var year="";
              var month="";
              var date="";
              for(var j=0; j<4;j++){
                year+=getData[i].expirationDate[j];
              }
              date+=year+"-";
              month+=getData[i].expirationDate[4];
              month+=getData[i].expirationDate[5];
              //day="01";
              var myDate=new Date(year, month-1, 1);
              var beginningDay=myDate.getDay();

              //var daysAdd=beginningDay<=3?(3-beginningDay+14):7-(beginningDay-3)+14; //wednesday is "3"
              var daysAdd=beginningDay<=Wednesday?(Wednesday-beginningDay+twoWeeks):7-(beginningDay-Wednesday)+twoWeeks; //wednesday is "3"
              date+=month+"-"+daysAdd;
              //date+=getData[i].expirationDate[6];
              //date+=getData[i].expirationDate[7];

              YieldCurveUnExtrapolated.push({
                value:getData[i].priorSettle,
                date:date,
                daysPlus:Math.round(Math.abs((myDate.getTime() - currdate.getTime())/(oneDay))),
                type:"Futures"
              });
            }
          }
        }
        retreivedYieldResults=true;
        sendDataToCPP(child);
      });
    });
  }
  var runFunc=function(i){
    if(i<numArray){
      https.get(apiStrings[i].url, function(response){
        clb(response, i, numArray, j, apiStrings[i].description, apiStrings[i].daysPlus, apiStrings[i].type);
      });
      runFunc(i+1);
    }
  }
  var clb=function(response, i, n, jObj, desc, daysPlus, type){
    var str = '';
    //another chunk of data has been recieved, so append it to `str`
    response.on('data', function (chunk) {
      str += chunk;
    });
    //the whole response has been recieved, so we just print it out here
    response.on('end', function () {
      var obj=JSON.parse(str);

      YieldCurveUnExtrapolated[i]={date:obj.observations[0].date, value:obj.observations[0].value, description:desc, daysPlus:daysPlus, type:type};
      jObj.j++;
      //console.log(jObj.j);
      if(n==jObj.j){
        retreivedYieldResults=true;
        //console.log(YieldCurveUnExtrapolated);
        sendDataToCPP();
      }
    });
  }
  var callback = function(response) {
    //var str = '';
    //another chunk of data has been recieved, so append it to `str`
    response.on('data', function (chunk) {
      historicalResults += chunk;
    });
    //the whole response has been recieved
    response.on('end', function () {
      //console.log(historicalResults);
      retreivedHistoricalResults=true;
      sendDataToCPP();
    });
  }
  function sendDataToCPP(){
    if(retreivedYieldResults&&retreivedHistoricalResults){

      child.stdin.write(JSON.stringify(YieldCurveUnExtrapolated));
      child.stdin.write("\n");
      child.stdin.write(historicalResults);
      child.stdin.write("\n");
      //child.stdin.write(JSON.stringify(portfolio));
      //child.stdin.write("\n");

    }
  }
}
module.exports=handleYield;
